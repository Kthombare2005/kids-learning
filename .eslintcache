[{"E:\\Target_2021\\project-kides\\src\\index.js":"1","E:\\Target_2021\\project-kides\\src\\reportWebVitals.js":"2","E:\\Target_2021\\project-kides\\src\\App.js":"3","E:\\Target_2021\\project-kides\\src\\component\\navbar.js":"4","E:\\Target_2021\\project-kides\\src\\component\\tspractical.js":"5","E:\\Target_2021\\project-kides\\src\\pages\\about.js":"6","E:\\Target_2021\\project-kides\\src\\pages\\home.js":"7","E:\\Target_2021\\project-kides\\src\\pages\\error.js":"8","E:\\Target_2021\\project-kides\\src\\pages\\practice.js":"9","E:\\Target_2021\\project-kides\\src\\pages\\table.js":"10","E:\\Target_2021\\project-kides\\src\\pages\\words.js":"11","E:\\Target_2021\\project-kides\\src\\pages\\alphabets.js":"12","E:\\Target_2021\\project-kides\\src\\pages\\numbers.js":"13","E:\\Target_2021\\project-kides\\src\\component\\footer.js":"14","E:\\Target_2021\\project-kides\\src\\Data\\Planets.js":"15","E:\\Target_2021\\project-kides\\src\\Data\\Flower.js":"16","E:\\Target_2021\\project-kides\\src\\Data\\Animals.js":"17","E:\\Target_2021\\project-kides\\src\\Data\\States.js":"18","E:\\Target_2021\\project-kides\\src\\hoc\\Auxiliary.js":"19","E:\\Target_2021\\project-kides\\src\\component\\Tabs\\TabsDisplay.js":"20"},{"size":606,"mtime":1613454200114,"results":"21","hashOfConfig":"22"},{"size":362,"mtime":1607178084168,"results":"23","hashOfConfig":"22"},{"size":1215,"mtime":1613539800594,"results":"24","hashOfConfig":"22"},{"size":1487,"mtime":1613842242923,"results":"25","hashOfConfig":"22"},{"size":4863,"mtime":1612879993705,"results":"26","hashOfConfig":"22"},{"size":1842,"mtime":1613739276224,"results":"27","hashOfConfig":"22"},{"size":2842,"mtime":1613741535114,"results":"28","hashOfConfig":"22"},{"size":409,"mtime":1611940392348,"results":"29","hashOfConfig":"22"},{"size":3925,"mtime":1613985048436,"results":"30","hashOfConfig":"22"},{"size":4080,"mtime":1612794181055,"results":"31","hashOfConfig":"22"},{"size":4806,"mtime":1614600951760,"results":"32","hashOfConfig":"22"},{"size":3916,"mtime":1615652711651,"results":"33","hashOfConfig":"22"},{"size":4944,"mtime":1613708619455,"results":"34","hashOfConfig":"22"},{"size":562,"mtime":1613740483617,"results":"35","hashOfConfig":"22"},{"size":2162,"mtime":1613655440890,"results":"36","hashOfConfig":"22"},{"size":2923,"mtime":1614601919107,"results":"37","hashOfConfig":"22"},{"size":2162,"mtime":1613664716317,"results":"38","hashOfConfig":"22"},{"size":4790,"mtime":1614602475507,"results":"39","hashOfConfig":"22"},{"size":73,"mtime":1615650751790,"results":"40","hashOfConfig":"22"},{"size":484,"mtime":1615651155364,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"190wjy4",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},"E:\\Target_2021\\project-kides\\src\\index.js",[],["93","94"],"E:\\Target_2021\\project-kides\\src\\reportWebVitals.js",[],["95","96"],"E:\\Target_2021\\project-kides\\src\\App.js",[],["97","98"],"E:\\Target_2021\\project-kides\\src\\component\\navbar.js",[],"E:\\Target_2021\\project-kides\\src\\component\\tspractical.js",[],["99","100"],"E:\\Target_2021\\project-kides\\src\\pages\\about.js",[],["101","102"],"E:\\Target_2021\\project-kides\\src\\pages\\home.js",[],["103","104"],"E:\\Target_2021\\project-kides\\src\\pages\\error.js",["105"],"import {Container,Jumbotron} from 'react-bootstrap';\r\nimport Navbar from '../component/navbar';\r\nimport errorSvg from './error404.svg';\r\n \r\nimport './about.css';\r\n\r\nfunction Error() {\r\n  return (\r\n    <div>    \r\n        <Navbar/>\r\n          \r\n        <Container>\r\n\r\n        <img src={errorSvg} alt=\"error 404\" height=\"700\" />          \r\n\r\n        </Container>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Error;\r\n","E:\\Target_2021\\project-kides\\src\\pages\\practice.js",[],"E:\\Target_2021\\project-kides\\src\\pages\\table.js",[],"E:\\Target_2021\\project-kides\\src\\pages\\words.js",[],"E:\\Target_2021\\project-kides\\src\\pages\\alphabets.js",["106"],"import {React, useState} from 'react';\r\nimport EngData from '../Data/EngData.json';\r\nimport MarathiAlpha from '../Data/Mdata.json';\r\nimport Barakade from '../Data/M1data.json';\r\nimport {Container,Card,Row,Col, Accordion,Tab} from 'react-bootstrap';\r\nimport Navbar from '../component/navbar';\r\nimport Footer from '../component/footer';\r\nimport Test from '../Data/test/test.json';\r\nimport './alphabets.css';\r\n\r\nimport TabsDisplay from \"../component/Tabs/TabsDisplay\";\r\n\r\nfunction Numbers() {\r\n    \r\n    const [name,setName] = useState('');\r\n   \r\n    const test=(idx)=>{       \r\n     setName(Test.map((value,id)=>{\r\n        return( \r\n           <Card key={id}>\r\n               <Card.Body>\r\n                   {value.val}\r\n               </Card.Body>\r\n           </Card>\r\n        );\r\n    }));\r\n    }\r\n\r\n  return (\r\n    <div >    \r\n        <Navbar/>        \r\n        <br/>    \r\n\r\n<Container className=\"alphabets\">\r\n    <TabsDisplay DefaultTab=\"English_Tab\">\r\n    <Tab eventKey=\"English_Tab\" title=\"English Alphabets Abc\">\r\n        <br/>\r\n        <Accordion defaultActiveKey=\"0\">\r\n        <Card>\r\n        <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n            English Alphabets Abc...\r\n        </Accordion.Toggle>\r\n        <Accordion.Collapse eventKey=\"0\">\r\n            <Card.Body>\r\n            <Row>\r\n            {\r\n                EngData.map((variant, idx) => (\r\n                    <Col md=\"2\" key={idx} className=\"media-col\" >\r\n                    <Card className=\"mb-3 card-style\">                    \r\n                        <Card.Body style={{padding:'1rem'}}>\r\n                        <Card.Title>{variant.val}</Card.Title>                    \r\n                        </Card.Body>\r\n                    </Card>\r\n                    </Col>\r\n                    ))\r\n            }    \r\n            </Row>   \r\n            </Card.Body>\r\n        </Accordion.Collapse>\r\n        </Card>\r\n        </Accordion> \r\n    \r\n    </Tab>\r\n    <Tab eventKey=\"Marathi\" title=\"Marathi Alphabets\"> \r\n    <br/>       \r\n    <Accordion defaultActiveKey=\"0\">\r\n  <Card>\r\n    <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n      Marathi Alphabets\r\n    </Accordion.Toggle>\r\n    <Accordion.Collapse eventKey=\"0\">\r\n      <Card.Body>        \r\n    <Row>\r\n    {\r\n        MarathiAlpha.map((variant, idx) => (\r\n            <Col md=\"2\" key={idx} className=\"media-col\" >\r\n            <Card className=\"mb-3 card-style\">             \r\n              <Card.Body style={{padding:'1rem'}}>\r\n                <Card.Title>{variant.val}</Card.Title>\r\n                \r\n              </Card.Body>\r\n            </Card>\r\n            </Col>\r\n          ))\r\n    }    \r\n    </Row>\r\n    </Card.Body>\r\n    </Accordion.Collapse>\r\n    </Card>\r\n    </Accordion>  \r\n    <br/>\r\n    </Tab>\r\n    <Tab eventKey=\"Marathi_Barakhadi\" title=\"Marathi Barakhadi\">\r\n        <br/><br/>\r\n    <Accordion defaultActiveKey=\"0\">\r\n  <Card>\r\n    <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n     Marathi Barakhadi\r\n    </Accordion.Toggle>\r\n    <Accordion.Collapse eventKey=\"0\">\r\n      <Card.Body>\r\n    {/* <div style={{backgroundColor: \"grey\",display:\"flex\", alignItems:\"center\", justifyContent:\"space-between\", boxSizing:\"border-box\",fontSize:\"22px\"  }}>\r\n       {name}       \r\n    </div> */}\r\n    <br/>\r\n    <Row>       \r\n        <br/>          \r\n    {  \r\n        Barakade.map((variant) => (\r\n            <Col md=\"2\" key={variant.id} className=\"media-col\" onClick={() => test(variant.id) } >\r\n            <Card className=\"mb-3 card-style\">             \r\n              <Card.Body style={{padding:'1rem'}}>\r\n                <Card.Title>{variant.val}</Card.Title>\r\n                \r\n              </Card.Body>\r\n            </Card>\r\n            </Col>\r\n          ))\r\n    }    \r\n    </Row>\r\n    </Card.Body>\r\n    </Accordion.Collapse>\r\n    </Card>\r\n    </Accordion>  \r\n    </Tab>\r\n\r\n    </TabsDisplay>\r\n</Container>\r\n    <Footer/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Numbers;\r\n","E:\\Target_2021\\project-kides\\src\\pages\\numbers.js",["107"],"/* eslint-disable no-mixed-operators */\r\nimport {Container,Jumbotron,Card,Row,Col,Accordion} from 'react-bootstrap';\r\nimport Navbar from '../component/navbar';\r\nimport Footer from '../component/footer';\r\nimport './about.css';\r\n\r\nfunction Numbers() {\r\n\r\n    const arr = x => Array.from(x);\r\n    const num = x => Number(x) || 0;\r\n    \r\n    const isEmpty = xs => xs.length === 0;\r\n    const take = n => xs => xs.slice(0,n);\r\n    const drop = n => xs => xs.slice(n);\r\n    const reverse = xs => xs.slice(0).reverse();\r\n    const comp = f => g => x => f (g (x));\r\n    const not = x => !x;\r\n    const chunk = n => xs =>\r\n      isEmpty(xs) ? [] : [take(n)(xs), ...chunk (n) (drop (n) (xs))];\r\n    \r\n    // numToWords :: (Number a, String a) => a -> String\r\n    let numToWords = n => {\r\n      \r\n      let a = [\r\n        '', 'One', 'Two', 'Three', 'Four',\r\n        'Five', 'Six', 'Seven', 'Eight', 'Nine',\r\n        'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen',\r\n        'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen'\r\n      ];\r\n      \r\n      let b = [\r\n        '', '', 'Twenty', 'Thirty', 'Forty',\r\n        'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'\r\n      ];\r\n      \r\n      let g = [\r\n        '', 'Thousand', 'Million', 'Billion', 'Trillion', 'Quadrillion',\r\n        'Quintillion', 'Sextillion', 'Septillion', 'Octillion', 'Nonillion'\r\n      ];\r\n      \r\n      // this part is really nasty still\r\n      // it might edit this again later to show how Monoids could fix this up\r\n      let makeGroup = ([ones,tens,huns]) => {\r\n        return [\r\n          num(huns) === 0 ? '' : a[huns] + ' hundred ',\r\n          num(ones) === 0 ? b[tens] : b[tens] && b[tens] + '-' || '',\r\n          a[tens+ones] || a[ones]\r\n        ].join('');\r\n    };\r\n      \r\n      let thousand = (group,i) => group === '' ? group : `${group} ${g[i]}`;\r\n      \r\n      if (typeof n === 'number')\r\n        return numToWords(String(n));\r\n      else if (n === '0')\r\n        return 'zero';\r\n      else\r\n        return comp (chunk(3)) (reverse) (arr(n))\r\n          .map(makeGroup)\r\n          .map(thousand)\r\n          .filter(comp(not)(isEmpty))\r\n          .reverse()\r\n          .join(' ');\r\n    };\r\n     \r\n  return (\r\n    <div>    \r\n        <Navbar/>\r\n        \r\n        <br/>        \r\n<Container>\r\n         \r\n<Card className=\"mb-3 card-style\">\r\n        <Card.Body>        \r\n    <Row>\r\n    {[...Array(11)].map((x, i) =>\r\n          <Col md=\"2\" key={i} className=\"media-col\" >\r\n          <Card className=\"mb-3 card-style\">\r\n           \r\n            <Card.Body style={{padding:'1rem'}}>\r\n              <Card.Title>{i}</Card.Title>\r\n              <Card.Text>\r\n                   {numToWords(i)} \r\n              </Card.Text>\r\n            </Card.Body>\r\n          </Card>\r\n          </Col>\r\n        )}\r\n    </Row>\r\n    </Card.Body>\r\n    </Card>\r\n    \r\n    <Accordion defaultActiveKey=\"0\">\r\n  <Card>\r\n    <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n      11 to 30\r\n    </Accordion.Toggle>\r\n    <Accordion.Collapse eventKey=\"0\">\r\n      <Card.Body>\r\n      <Row>\r\n    {[...Array(20)].map((x, i) =>\r\n          <Col md=\"2\" key={i} className=\"media-col\" >\r\n          <Card className=\"mb-3 card-style\">\r\n           \r\n            <Card.Body style={{padding:'1rem'}}>\r\n              <Card.Title>{i+11}</Card.Title>\r\n              <Card.Text>\r\n                   {numToWords(i+11)} \r\n              </Card.Text>\r\n            </Card.Body>\r\n          </Card>\r\n          </Col>\r\n        )}\r\n    </Row>\r\n      </Card.Body>\r\n    </Accordion.Collapse>\r\n  </Card>\r\n  <Card>\r\n    <Accordion.Toggle as={Card.Header} eventKey=\"1\">\r\n      31 to 60\r\n    </Accordion.Toggle>\r\n    <Accordion.Collapse eventKey=\"1\">\r\n      <Card.Body>\r\n      <Row>\r\n    {[...Array(30)].map((x, i) =>\r\n          <Col md=\"2\" key={i} className=\"media-col\" >\r\n          <Card className=\"mb-3 card-style\">\r\n           \r\n            <Card.Body style={{padding:'1rem'}}>\r\n              <Card.Title>{i+31}</Card.Title>\r\n              <Card.Text>\r\n                   {numToWords(i+31)} \r\n              </Card.Text>\r\n            </Card.Body>\r\n          </Card>\r\n          </Col>\r\n        )}\r\n    </Row>\r\n      </Card.Body>\r\n    </Accordion.Collapse>\r\n  </Card>\r\n  <Card>\r\n    <Accordion.Toggle as={Card.Header} eventKey=\"2\">\r\n      61 to 100\r\n    </Accordion.Toggle>\r\n    <Accordion.Collapse eventKey=\"2\">\r\n      <Card.Body>\r\n      <Row>\r\n    {[...Array(40)].map((x, i) =>\r\n          <Col md=\"2\" key={i} className=\"media-col\" >\r\n          <Card className=\"mb-3 card-style\">\r\n           \r\n            <Card.Body style={{padding:'0.5rem'}}>\r\n              <Card.Title>{i+61}</Card.Title>\r\n              <Card.Text>\r\n                   {numToWords(i+61)} \r\n              </Card.Text>\r\n            </Card.Body>\r\n          </Card>\r\n          </Col>\r\n        )}\r\n    </Row>\r\n      </Card.Body>\r\n    </Accordion.Collapse>\r\n  </Card>\r\n</Accordion>\r\n \r\n</Container>\r\n    <Footer/>        \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Numbers;\r\n","E:\\Target_2021\\project-kides\\src\\component\\footer.js",[],["108","109"],"E:\\Target_2021\\project-kides\\src\\Data\\Planets.js",[],"E:\\Target_2021\\project-kides\\src\\Data\\Flower.js",[],"E:\\Target_2021\\project-kides\\src\\Data\\Animals.js",[],"E:\\Target_2021\\project-kides\\src\\Data\\States.js",[],"E:\\Target_2021\\project-kides\\src\\hoc\\Auxiliary.js",[],"E:\\Target_2021\\project-kides\\src\\component\\Tabs\\TabsDisplay.js",["110"],"import React, {useState} from \"react\";\r\nimport Aux from \"../../hoc/Auxiliary\";\r\n\r\nimport {Tabs,Tab} from \"react-bootstrap\";\r\n\r\nfunction TabsDisplay(props){\r\n\r\n    const [key, setKey] = useState(props.DefaultTab);\r\n\r\n    return (\r\n        <Aux>\r\n        <Tabs\r\n        id=\"controlled-tab-example\"\r\n        activeKey={key}\r\n        onSelect={(k) => setKey(k)}\r\n      >        \r\n        {props.children}\r\n       \r\n        </Tabs>\r\n        </Aux>\r\n    );\r\n}\r\n\r\nexport default TabsDisplay;",{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"111","replacedBy":"115"},{"ruleId":"113","replacedBy":"116"},{"ruleId":"111","replacedBy":"117"},{"ruleId":"113","replacedBy":"118"},{"ruleId":"111","replacedBy":"119"},{"ruleId":"113","replacedBy":"120"},{"ruleId":"111","replacedBy":"121"},{"ruleId":"113","replacedBy":"122"},{"ruleId":"111","replacedBy":"123"},{"ruleId":"113","replacedBy":"124"},{"ruleId":"125","severity":1,"message":"126","line":1,"column":19,"nodeType":"127","messageId":"128","endLine":1,"endColumn":28},{"ruleId":"125","severity":1,"message":"129","line":15,"column":12,"nodeType":"127","messageId":"128","endLine":15,"endColumn":16},{"ruleId":"125","severity":1,"message":"126","line":2,"column":19,"nodeType":"127","messageId":"128","endLine":2,"endColumn":28},{"ruleId":"111","replacedBy":"130"},{"ruleId":"113","replacedBy":"131"},{"ruleId":"125","severity":1,"message":"132","line":4,"column":14,"nodeType":"127","messageId":"128","endLine":4,"endColumn":17},"no-native-reassign",["133"],"no-negated-in-lhs",["134"],["133"],["134"],["133"],["134"],["133"],["134"],["133"],["134"],["133"],["134"],"no-unused-vars","'Jumbotron' is defined but never used.","Identifier","unusedVar","'name' is assigned a value but never used.",["133"],["134"],"'Tab' is defined but never used.","no-global-assign","no-unsafe-negation"]