[{"E:\\Target_2021\\project-kides\\src\\index.js":"1","E:\\Target_2021\\project-kides\\src\\reportWebVitals.js":"2","E:\\Target_2021\\project-kides\\src\\App.js":"3","E:\\Target_2021\\project-kides\\src\\component\\navbar.js":"4","E:\\Target_2021\\project-kides\\src\\component\\tspractical.js":"5","E:\\Target_2021\\project-kides\\src\\pages\\about.js":"6","E:\\Target_2021\\project-kides\\src\\pages\\home.js":"7","E:\\Target_2021\\project-kides\\src\\pages\\error.js":"8","E:\\Target_2021\\project-kides\\src\\pages\\practice.js":"9","E:\\Target_2021\\project-kides\\src\\pages\\table.js":"10","E:\\Target_2021\\project-kides\\src\\pages\\words.js":"11","E:\\Target_2021\\project-kides\\src\\pages\\alphabets.js":"12","E:\\Target_2021\\project-kides\\src\\pages\\numbers.js":"13","E:\\Target_2021\\project-kides\\src\\component\\footer.js":"14","E:\\Target_2021\\project-kides\\src\\Data\\Planets.js":"15","E:\\Target_2021\\project-kides\\src\\Data\\Flower.js":"16","E:\\Target_2021\\project-kides\\src\\Data\\Animals.js":"17","E:\\Target_2021\\project-kides\\src\\Data\\States.js":"18","E:\\Target_2021\\project-kides\\src\\hoc\\Auxiliary.js":"19","E:\\Target_2021\\project-kides\\src\\component\\Tabs\\TabsDisplay.js":"20","E:\\Target_2021\\project-kides\\src\\pages\\Speech\\Speech.js":"21"},{"size":606,"mtime":1613454200114,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":1607178084168,"results":"24","hashOfConfig":"23"},{"size":1215,"mtime":1613539800594,"results":"25","hashOfConfig":"23"},{"size":1487,"mtime":1613842242923,"results":"26","hashOfConfig":"23"},{"size":4863,"mtime":1612879993705,"results":"27","hashOfConfig":"23"},{"size":1917,"mtime":1615886332894,"results":"28","hashOfConfig":"23"},{"size":3094,"mtime":1615885454633,"results":"29","hashOfConfig":"23"},{"size":409,"mtime":1611940392348,"results":"30","hashOfConfig":"23"},{"size":3925,"mtime":1613985048436,"results":"31","hashOfConfig":"23"},{"size":4114,"mtime":1615880101508,"results":"32","hashOfConfig":"23"},{"size":5195,"mtime":1615796349856,"results":"33","hashOfConfig":"23"},{"size":4105,"mtime":1615799948121,"results":"34","hashOfConfig":"23"},{"size":5174,"mtime":1615799857790,"results":"35","hashOfConfig":"23"},{"size":562,"mtime":1613740483617,"results":"36","hashOfConfig":"23"},{"size":2324,"mtime":1615797638906,"results":"37","hashOfConfig":"23"},{"size":3113,"mtime":1615797514240,"results":"38","hashOfConfig":"23"},{"size":2162,"mtime":1613664716317,"results":"39","hashOfConfig":"23"},{"size":4948,"mtime":1615798460442,"results":"40","hashOfConfig":"23"},{"size":73,"mtime":1615650751790,"results":"41","hashOfConfig":"23"},{"size":484,"mtime":1615651155364,"results":"42","hashOfConfig":"23"},{"size":451,"mtime":1615799545194,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"190wjy4",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"52"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"49"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"52"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"49"},"E:\\Target_2021\\project-kides\\src\\index.js",[],["96","97"],"E:\\Target_2021\\project-kides\\src\\reportWebVitals.js",[],["98","99"],"E:\\Target_2021\\project-kides\\src\\App.js",[],["100","101"],"E:\\Target_2021\\project-kides\\src\\component\\navbar.js",[],"E:\\Target_2021\\project-kides\\src\\component\\tspractical.js",[],["102","103"],"E:\\Target_2021\\project-kides\\src\\pages\\about.js",[],"E:\\Target_2021\\project-kides\\src\\pages\\home.js",[],"E:\\Target_2021\\project-kides\\src\\pages\\error.js",["104"],"import {Container,Jumbotron} from 'react-bootstrap';\r\nimport Navbar from '../component/navbar';\r\nimport errorSvg from './error404.svg';\r\n \r\nimport './about.css';\r\n\r\nfunction Error() {\r\n  return (\r\n    <div>    \r\n        <Navbar/>\r\n          \r\n        <Container>\r\n\r\n        <img src={errorSvg} alt=\"error 404\" height=\"700\" />          \r\n\r\n        </Container>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Error;\r\n","E:\\Target_2021\\project-kides\\src\\pages\\practice.js",[],["105","106"],"E:\\Target_2021\\project-kides\\src\\pages\\table.js",[],"E:\\Target_2021\\project-kides\\src\\pages\\words.js",[],"E:\\Target_2021\\project-kides\\src\\pages\\alphabets.js",["107"],"import {React, useState} from 'react';\r\n\r\nimport EngData from '../Data/EngData.json';\r\nimport MarathiAlpha from '../Data/Mdata.json';\r\nimport Barakade from '../Data/M1data.json';\r\nimport {Container,Card,Row,Col, Accordion,Tab} from 'react-bootstrap';\r\n\r\nimport Navbar from '../component/navbar';\r\nimport Footer from '../component/footer';\r\nimport Test from '../Data/test/test.json';\r\nimport Speech from \"./Speech/Speech\";\r\n\r\nimport './alphabets.css';\r\nimport TabsDisplay from \"../component/Tabs/TabsDisplay\";\r\n\r\nfunction Numbers() {\r\n    \r\n    const [name,setName] = useState('');\r\n   \r\n    const test=(idx)=>{       \r\n     setName(Test.map((value,id)=>{\r\n        return( \r\n           <Card key={id}>\r\n               <Card.Body>\r\n                   {value.val}\r\n               </Card.Body>\r\n           </Card>\r\n        );\r\n    }));\r\n    }\r\n\r\n  return (\r\n    <div >    \r\n        <Navbar/>        \r\n        <br/>    \r\n\r\n<Container className=\"alphabets\">\r\n    <TabsDisplay DefaultTab=\"English_Tab\">\r\n    <Tab eventKey=\"English_Tab\" title=\"English Alphabets Abc\">\r\n        <br/>\r\n        <Accordion defaultActiveKey=\"0\">\r\n        <Card>\r\n        <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n            English Alphabets Abc...\r\n        </Accordion.Toggle>\r\n        <Accordion.Collapse eventKey=\"0\">\r\n            <Card.Body>\r\n            <Row>\r\n            {\r\n                EngData.map((variant, idx) => (\r\n                    <Col md=\"2\" key={idx}  className=\"media-col\" >\r\n                    <Speech  text={variant.val}>\r\n                            <Card className=\"mb-3 card-style\">                    \r\n                                <Card.Body style={{padding:'0.8rem'}}>\r\n                                <Card.Title>{variant.val}</Card.Title>                    \r\n                                </Card.Body>\r\n                            </Card>\r\n                    </Speech>\r\n                    </Col>                    \r\n                    ))\r\n            }    \r\n            </Row>   \r\n            </Card.Body>\r\n        </Accordion.Collapse>\r\n        </Card>\r\n        </Accordion> \r\n    \r\n    </Tab>\r\n    <Tab eventKey=\"Marathi\" title=\"Marathi Alphabets\"> \r\n    <br/>       \r\n    <Accordion defaultActiveKey=\"0\">\r\n  <Card>\r\n    <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n      Marathi Alphabets\r\n    </Accordion.Toggle>\r\n    <Accordion.Collapse eventKey=\"0\">\r\n      <Card.Body>        \r\n    <Row>\r\n    {\r\n        MarathiAlpha.map((variant, idx) => (\r\n            <Col md=\"2\" key={idx} className=\"media-col\" >\r\n            <Card className=\"mb-3 card-style\">             \r\n              <Card.Body style={{padding:'0.8rem'}}>\r\n                <Card.Title>{variant.val}</Card.Title>                \r\n              </Card.Body>\r\n            </Card>\r\n            </Col>\r\n          ))\r\n    }    \r\n    </Row>\r\n    </Card.Body>\r\n    </Accordion.Collapse>\r\n    </Card>\r\n    </Accordion>  \r\n    <br/>\r\n    </Tab>\r\n    <Tab eventKey=\"Marathi_Barakhadi\" title=\"Marathi Barakhadi\">\r\n        <br/><br/>\r\n    <Accordion defaultActiveKey=\"0\">\r\n  <Card>\r\n    <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n     Marathi Barakhadi\r\n    </Accordion.Toggle>\r\n    <Accordion.Collapse eventKey=\"0\">\r\n      <Card.Body>\r\n    {/* <div style={{backgroundColor: \"grey\",display:\"flex\", alignItems:\"center\", justifyContent:\"space-between\", boxSizing:\"border-box\",fontSize:\"22px\"  }}>\r\n       {name}       \r\n    </div> */}\r\n    <br/>\r\n    <Row>       \r\n        <br/>          \r\n    {  \r\n        Barakade.map((variant) => (\r\n            <Col md=\"2\" key={variant.id} className=\"media-col\" onClick={() => test(variant.id) } >\r\n            <Card className=\"mb-3 card-style\">             \r\n              <Card.Body style={{padding:'0.8rem'}}>\r\n                <Card.Title>{variant.val}</Card.Title>\r\n                \r\n              </Card.Body>\r\n            </Card>\r\n            </Col>\r\n          ))\r\n    }    \r\n    </Row>\r\n    </Card.Body>\r\n    </Accordion.Collapse>\r\n    </Card>\r\n    </Accordion>  \r\n    </Tab>\r\n\r\n    </TabsDisplay>\r\n</Container>\r\n    <Footer/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Numbers;\r\n","E:\\Target_2021\\project-kides\\src\\pages\\numbers.js",["108"],"/* eslint-disable no-mixed-operators */\r\nimport {Container,Jumbotron,Card,Row,Col,Accordion} from 'react-bootstrap';\r\nimport Navbar from '../component/navbar';\r\nimport Footer from '../component/footer';\r\nimport './about.css';\r\nimport Speech from './Speech/Speech';\r\n\r\nfunction Numbers() {\r\n\r\n    const arr = x => Array.from(x);\r\n    const num = x => Number(x) || 0;\r\n    \r\n    const isEmpty = xs => xs.length === 0;\r\n    const take = n => xs => xs.slice(0,n);\r\n    const drop = n => xs => xs.slice(n);\r\n    const reverse = xs => xs.slice(0).reverse();\r\n    const comp = f => g => x => f (g (x));\r\n    const not = x => !x;\r\n    const chunk = n => xs =>\r\n      isEmpty(xs) ? [] : [take(n)(xs), ...chunk (n) (drop (n) (xs))];\r\n    \r\n    // numToWords :: (Number a, String a) => a -> String\r\n    let numToWords = n => {\r\n      \r\n      let a = [\r\n        '', 'One', 'Two', 'Three', 'Four',\r\n        'Five', 'Six', 'Seven', 'Eight', 'Nine',\r\n        'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen',\r\n        'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen'\r\n      ];\r\n      \r\n      let b = [\r\n        '', '', 'Twenty', 'Thirty', 'Forty',\r\n        'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'\r\n      ];\r\n      \r\n      let g = [\r\n        '', 'Thousand', 'Million', 'Billion', 'Trillion', 'Quadrillion',\r\n        'Quintillion', 'Sextillion', 'Septillion', 'Octillion', 'Nonillion'\r\n      ];\r\n      \r\n      // this part is really nasty still\r\n      // it might edit this again later to show how Monoids could fix this up\r\n      let makeGroup = ([ones,tens,huns]) => {\r\n        return [\r\n          num(huns) === 0 ? '' : a[huns] + ' hundred ',\r\n          num(ones) === 0 ? b[tens] : b[tens] && b[tens] + '-' || '',\r\n          a[tens+ones] || a[ones]\r\n        ].join('');\r\n    };\r\n      \r\n      let thousand = (group,i) => group === '' ? group : `${group} ${g[i]}`;\r\n      \r\n      if (typeof n === 'number')\r\n        return numToWords(String(n));\r\n      else if (n === '0')\r\n        return 'zero';\r\n      else\r\n        return comp (chunk(3)) (reverse) (arr(n))\r\n          .map(makeGroup)\r\n          .map(thousand)\r\n          .filter(comp(not)(isEmpty))\r\n          .reverse()\r\n          .join(' ');\r\n    };\r\n     \r\n  return (\r\n    <div>    \r\n        <Navbar/>\r\n        \r\n        <br/>        \r\n<Container>\r\n         \r\n<Card className=\"mb-3\">\r\n        <Card.Body>        \r\n    <Row>\r\n    {[...Array(11)].map((x, i) =>\r\n          <Col md=\"2\" key={i} className=\"media-col\" >\r\n          <Card className=\"mb-3 card-style\">\r\n              <Card.Body style={{padding:'0.5rem'}}>\r\n              <Speech text={ i }>     \r\n                <Card.Title>{i}</Card.Title>\r\n                <Card.Text>\r\n                    {numToWords(i)} \r\n                </Card.Text>\r\n                </Speech>\r\n              </Card.Body>\r\n          </Card>\r\n          </Col>\r\n        )}\r\n    </Row>\r\n    </Card.Body>\r\n    </Card>\r\n    \r\n    <Accordion defaultActiveKey=\"0\">\r\n  <Card>\r\n    <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n      11 to 30\r\n    </Accordion.Toggle>\r\n    <Accordion.Collapse eventKey=\"0\">\r\n      <Card.Body>\r\n      <Row>\r\n    {[...Array(20)].map((x, i) =>\r\n          <Col md=\"2\" key={i} className=\"media-col\" >\r\n          <Card className=\"mb-3 card-style\">\r\n          <Speech text={ i+11 }>\r\n            <Card.Body style={{padding:'0.5rem'}}>\r\n              <Card.Title>{i+11}</Card.Title>\r\n              <Card.Text>\r\n                   {numToWords(i+11)} \r\n              </Card.Text>\r\n            </Card.Body>\r\n            </Speech>\r\n          </Card>\r\n          </Col>\r\n        )}\r\n    </Row>\r\n      </Card.Body>\r\n    </Accordion.Collapse>\r\n  </Card>\r\n  <Card>\r\n    <Accordion.Toggle as={Card.Header} eventKey=\"1\">\r\n      31 to 60\r\n    </Accordion.Toggle>\r\n    <Accordion.Collapse eventKey=\"1\">\r\n      <Card.Body>\r\n      <Row>\r\n    {[...Array(30)].map((x, i) =>\r\n          <Col md=\"2\" key={i} className=\"media-col\" >\r\n          <Card className=\"mb-3 card-style\">\r\n          <Speech text={ i+31 }>\r\n            <Card.Body style={{padding:'0.5rem'}}>\r\n              <Card.Title>{i+31}</Card.Title>\r\n              <Card.Text>\r\n                   {numToWords(i+31)} \r\n              </Card.Text>\r\n            </Card.Body>\r\n           </Speech> \r\n          </Card>\r\n          </Col>\r\n        )}\r\n    </Row>\r\n      </Card.Body>\r\n    </Accordion.Collapse>\r\n  </Card>\r\n  <Card>\r\n    <Accordion.Toggle as={Card.Header} eventKey=\"2\">\r\n      61 to 100\r\n    </Accordion.Toggle>\r\n    <Accordion.Collapse eventKey=\"2\">\r\n      <Card.Body>\r\n      <Row>\r\n    {[...Array(40)].map((x, i) =>\r\n          <Col md=\"2\" key={i} className=\"media-col\" >\r\n          <Card className=\"mb-3 card-style\">\r\n          <Speech text={ i+61 }>\r\n            <Card.Body style={{padding:'0.5rem'}}>\r\n              <Card.Title>{i+61}</Card.Title>\r\n              <Card.Text>\r\n                   {numToWords(i+61)} \r\n              </Card.Text>\r\n            </Card.Body>\r\n           </Speech>\r\n          </Card>\r\n          </Col>\r\n        )}\r\n    </Row>\r\n      </Card.Body>\r\n    </Accordion.Collapse>\r\n  </Card>\r\n</Accordion>\r\n \r\n</Container>\r\n    <Footer/>        \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Numbers;\r\n","E:\\Target_2021\\project-kides\\src\\component\\footer.js",[],"E:\\Target_2021\\project-kides\\src\\Data\\Planets.js",[],"E:\\Target_2021\\project-kides\\src\\Data\\Flower.js",[],"E:\\Target_2021\\project-kides\\src\\Data\\Animals.js",[],"E:\\Target_2021\\project-kides\\src\\Data\\States.js",[],"E:\\Target_2021\\project-kides\\src\\hoc\\Auxiliary.js",[],"E:\\Target_2021\\project-kides\\src\\component\\Tabs\\TabsDisplay.js",["109"],"import React, {useState} from \"react\";\r\nimport Aux from \"../../hoc/Auxiliary\";\r\n\r\nimport {Tabs,Tab} from \"react-bootstrap\";\r\n\r\nfunction TabsDisplay(props){\r\n\r\n    const [key, setKey] = useState(props.DefaultTab);\r\n\r\n    return (\r\n        <Aux>\r\n        <Tabs\r\n        id=\"controlled-tab-example\"\r\n        activeKey={key}\r\n        onSelect={(k) => setKey(k)}\r\n      >        \r\n        {props.children}\r\n       \r\n        </Tabs>\r\n        </Aux>\r\n    );\r\n}\r\n\r\nexport default TabsDisplay;","E:\\Target_2021\\project-kides\\src\\pages\\Speech\\Speech.js",["110"],"import React,{ useState } from \"react\";\r\nimport { useSpeechSynthesis} from \"react-speech-kit\";\r\n\r\nfunction Speech(props) {\r\n\r\n    const [text, setText] = useState(props.text);\r\n    // const [voiceType, setVoice] = useState(17);\r\n\r\n    const { speak } = useSpeechSynthesis();\r\n\r\n    return(\r\n        \r\n        <div onClick={() => speak({ text: text })}>\r\n                { props.children }\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default Speech;",{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"111","replacedBy":"115"},{"ruleId":"113","replacedBy":"116"},{"ruleId":"111","replacedBy":"117"},{"ruleId":"113","replacedBy":"118"},{"ruleId":"111","replacedBy":"119"},{"ruleId":"113","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":1,"column":19,"nodeType":"123","messageId":"124","endLine":1,"endColumn":28},{"ruleId":"111","replacedBy":"125"},{"ruleId":"113","replacedBy":"126"},{"ruleId":"121","severity":1,"message":"127","line":18,"column":12,"nodeType":"123","messageId":"124","endLine":18,"endColumn":16},{"ruleId":"121","severity":1,"message":"122","line":2,"column":19,"nodeType":"123","messageId":"124","endLine":2,"endColumn":28},{"ruleId":"121","severity":1,"message":"128","line":4,"column":14,"nodeType":"123","messageId":"124","endLine":4,"endColumn":17},{"ruleId":"121","severity":1,"message":"129","line":6,"column":18,"nodeType":"123","messageId":"124","endLine":6,"endColumn":25},"no-native-reassign",["130"],"no-negated-in-lhs",["131"],["130"],["131"],["130"],["131"],["130"],["131"],"no-unused-vars","'Jumbotron' is defined but never used.","Identifier","unusedVar",["130"],["131"],"'name' is assigned a value but never used.","'Tab' is defined but never used.","'setText' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]